{"version":3,"sources":["Components/MainContent/Profile/Posts.module.css","Components/Nav/Nav.module.css","reportWebVitals.ts","Components/Nav/Nav.tsx","Components/MainContent/News/News.tsx","Components/MainContent/Music/Music.tsx","Components/MainContent/Settings/Settings.tsx","redux/messageReduser.ts","Components/MainContent/Dialogs/DialogsItems.tsx","Components/MainContent/Dialogs/Messages.tsx","Components/Common/FormsControls.tsx","utils/validators/validators.tsx","Components/MainContent/Dialogs/Dialogs.tsx","HOC/WithAuthRedirect.tsx","Components/MainContent/Dialogs/DialogContainer.tsx","API/api.ts","redux/usersReduser.ts","assets/images/blank-profile-picture-973460_960_720.webp","Components/MainContent/Users/Users.tsx","assets/images/loader.gif","Components/Common/Preloader.tsx","Components/MainContent/Users/UserContainer.tsx","Components/MainContent/Profile/Posts.tsx","redux/profileReduser.ts","Components/MainContent/Profile/NewPost.tsx","Components/MainContent/Profile/NewPostContainer.tsx","StoreContext.ts","Components/MainContent/Profile/MyPost.tsx","Components/MainContent/Profile/ProfileStatus.tsx","Components/MainContent/Profile/ProfileInfo.tsx","Components/MainContent/Profile/Profile.tsx","Components/MainContent/Profile/ProfileContainer.tsx","Components/Header/Header.tsx","redux/AuthReducer.ts","Components/Header/HeaderContainer.tsx","Components/MainContent/login/login.tsx","App.tsx","redux/StoreRedux.ts","index.tsx","Components/MainContent/Dialogs/Dialogs.module.css","Components/Common/FormsControls.module.css","Components/MainContent/Users/User.module.css","Components/Header/Header.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Nav","className","s","to","activeClassName","activeLink","News","Music","Settings","initialState","dialogsData","id","name","messageData","message","DialogsItems","props","dialog","Messages","messages","FormControl","input","meta","child","hasError","touched","error","formControl","children","Textarea","restProps","Input","required","value","maxLengthCreator","maxLength","length","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","placeholder","mapStateToPropsRedirect","state","isAuth","Auth","WithAuthRedirect","Component","connect","DialogContainer","compose","dispatch","addMessage","newMessageBody","type","sendMessageAC","dialogElements","map","d","messageElement","m","containerDialogs","values","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","response","data","userId","post","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","users","totalUsersCount","isFetching","followingInProgress","togleIsFetching","togleIsFollowingProgress","Users","pageCount","Math","ceil","pages","i","push","p","onClick","e","onPageChanged","selectedNum","usersPage","u","src","photos","small","userPhoto","alt","userImg","followed","disabled","some","unfollow","follow","Preloader","loader","style","width","UsersAIP","pageNumber","getUsersThunkCreator","this","React","UsersPage","resultCode","userID","setCurrentPage","items","count","totalCount","Posts","avaImg","like","posts","profile","newPostText","setStatus","AddNewPostForm","NewPostContainer","postData","addPost","StoreContext","createContext","MyPost","Consumer","store","postElements","getState","ProfileStatus","editMode","disActivateEditMode","setState","activateEditMode","onStatusChange","currentTarget","prevProps","prevState","snapshot","onDoubleClick","onChange","autoFocus","onBlur","ProfileInfo","large","Profile","mainProfile","ProfileContainer","match","params","String","autorizedUserId","getUserProfile","withRouter","Header","header","login","logout","setAuthUsersData","payload","getAuthUsersData","HeaderApi","LoginReduxForm","formSummaryError","LoginTC","a","stopSubmit","_error","formData","App","HeaderContainer","path","render","UserContainer","rootReducers","combineReducers","action","postMessage","stateCopy","newMessageText","filter","formReducer","createStore","applyMiddleware","thunkMiddleware","window","renderTree","ReactDOM","StrictMode","Provider","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.8169bf1f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avaImg\":\"Posts_avaImg__19nYX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Nav\":\"Nav_Nav__3AhGP\",\"activeLink\":\"Nav_activeLink__NMa5k\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Nav.module.css'\r\n\r\n\r\nexport const Nav=()=>{\r\n    return(\r\n        <div className={s.Nav}>\r\n            <div><NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink></div>\r\n            <div><NavLink to='/dialogs' activeClassName={s.activeLink}>Messages</NavLink></div>\r\n            <div><NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink></div>\r\n            <div><NavLink to='/news' activeClassName={s.activeLink}>News</NavLink></div>\r\n            <div><NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink></div>\r\n            <div><NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink></div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\n\r\n\r\nexport const News = () => {\r\n    return (<div>\r\n            News\r\n        </div>\r\n    )}","import React from 'react';\r\n\r\n\r\n\r\nexport const Music = () => {\r\n    return (<div>\r\n            Music\r\n        </div>\r\n    )}","import React from 'react';\r\n\r\nexport const Settings = () => {\r\n    return (<div>\r\n            Settings\r\n        </div>\r\n    )\r\n}","import {MessagesType} from '../App';\r\n\r\nexport type ActionMessageType = ReturnType<typeof sendMessageAC>\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {id: 1, name: 'Anna'},\r\n        {id: 2, name: 'Nik'},\r\n        {id: 3, name: 'Mike'},\r\n        {id: 4, name: 'Dima'},\r\n        {id: 6, name: 'Nino'},\r\n    ],\r\n    messageData: [\r\n        {id: 1, message: 'Hi!'},\r\n        {id: 2, message: 'Yes'},\r\n        {id: 3, message: 'No'},\r\n        {id: 4, message: 'Love'},\r\n        {id: 5, message: 'Look'},\r\n    ],\r\n}\r\n\r\nexport const messageReduser = (state: MessagesType = initialState, action: ActionMessageType): MessagesType => {\r\n    switch (action.type) {\r\n        case'SEND_MESSAGE' :\r\n            let newMessageText = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messageData: [...state.messageData, {id: 6, message: newMessageText}],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n    /* if(action.type==='ADD_MESSAGE'){\r\n         state.newMessage=action.newText;\r\n     }else if(action.type==='SEND_MESSAGE'){\r\n         let newMessageText=state.newMessage;\r\n         state.newMessage=''\r\n        state.messageData.push({id: 1, message: newMessageText});\r\n     }\r\n     return state;*/\r\n}\r\n\r\nexport const sendMessageAC = (newMessageBody: string) => {\r\n    return {type: 'SEND_MESSAGE', newMessageBody} as const\r\n}","import s from './Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport React from 'react';\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport const DialogsItems = (props: PropsType) => {\r\n    return (<div className={s.dialog}>\r\n        <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n    </div>)\r\n}\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Messages = (props: PropsType) => {\r\n    return (<div className={s.messages}>{props.message}</div>)\r\n}\r\n","import React from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\ntype PropsType = {\r\n    input: any\r\n    meta: any\r\n    child: any\r\n}\r\nexport const FormControl: React.FC<PropsType> = ({input, meta, child, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div> {props.children}</div>\r\n            <div>{hasError && <span>{meta.error}</span>}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<PropsType> = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input}{...restProps}/></FormControl>\r\n\r\n}\r\n\r\nexport const Input: React.FC<PropsType> = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input}{...props}/></FormControl>\r\n}","import React from 'react';\r\n\r\nexport const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogsItems} from './DialogsItems';\r\nimport {Messages} from './Messages';\r\nimport {MessagesType} from '../../../App';\r\nimport {Redirect} from 'react-router';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../Common/FormsControls';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\n\r\ntype PropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n    messageData: MessagesType\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Dialogs = (props: PropsType) => {\r\n\r\n    let dialogElements = props.messageData.dialogsData.map(d => <DialogsItems key={d.id} id={d.id} name={d.name}/>)\r\n\r\n    let messageElement = props.messageData.messageData.map(m => <Messages key={m.id} message={m.message}/>)\r\n\r\n    let addNewMessage = (values: FormDataType) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n    if (props.isAuth == false) return <Redirect to={'/Login'}/>\r\n\r\n    return (<div className={s.containerDialogs}>\r\n            <div>\r\n                {dialogElements}\r\n            </div>\r\n            <div>\r\n                {messageElement}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength = maxLengthCreator(50)\r\n\r\nlet AddMessageForm = (props: any) => {\r\n    return <form onSubmit={(props.handleSubmit)}>\r\n        <div><Field component={Textarea} validate={[required, maxLength]} name={'newMessageBody'}\r\n                    placeholder={'Enter yout message...'}/></div>\r\n        <div>\r\n            <button>Send</button>\r\n        </div>\r\n\r\n    </form>\r\n}\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogMessageForm'})(AddMessageForm);","\r\nimport React, {ComponentType} from 'react';\r\nimport {AppStateType} from '../redux/StoreRedux';\r\nimport {connect} from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype  MapStateToPropsRedirectType = {\r\n    isAuth:boolean\r\n}\r\n\r\nlet mapStateToPropsRedirect = (state: AppStateType): MapStateToPropsRedirectType => ({\r\n    isAuth: state.Auth.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect<T>(Component:ComponentType<T>){\r\n    let RedirectComponent=(props:MapStateToPropsRedirectType)=>{\r\n     let {isAuth,...restProps}= props;\r\n     if(!isAuth){return <Redirect to={'/login'}/>\r\n        }\r\n        return <Component {...restProps as T}/>\r\n\r\n    }\r\n     let AuthRedirectComponent=connect(mapStateToPropsRedirect)(RedirectComponent);\r\n    return AuthRedirectComponent;\r\n}\r\n\r\n","import React from 'react';\r\nimport {sendMessageAC} from '../../../redux/messageReduser';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {MessagesType} from '../../../App';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {AppStateType} from '../../../redux/StoreRedux';\r\nimport {WithAuthRedirect} from '../../../HOC/WithAuthRedirect';\r\n\r\ntype MapStateToPropsType = {\r\n    messageData: MessagesType\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        messageData: state.messageData,\r\n        isAuth: state.Auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch,): MapDispatchToPropsType => {\r\n\r\n    return {\r\n        addMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport const DialogContainer = compose<React.ComponentType>\r\n(connect(mapStateToProps, mapDispatchToProps), WithAuthRedirect)(Dialogs);\r\n","import axios from 'axios';\r\nimport {UserType} from '../redux/usersReduser';\r\nimport {ContactsType, PhotoType} from '../redux/profileReduser';\r\nimport {DataType} from '../Components/Header/HeaderContainer';\r\n\r\ntype APIStatusType = string\r\n\r\ntype APIType = {\r\n    resultCode: number\r\n    totalCount: number\r\n    items: Array<UserType>\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: PhotoType\r\n    data: DataType\r\n}\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '13158516-512e-4eb5-8351-d4d4ecf9c6e7'\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get<APIType>(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIType>(`follow/${userId}`, {})\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<APIType>(`follow/${userId}`);\r\n    },\r\n    getProfile(userId: string) {\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get<APIType>(`profile/` + userId);\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<APIStatusType>(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIType>(`profile/status/`, {status: status});\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIType>(`auth/me`)\r\n    },\r\n    login(email:string,password:string, rememberMe:boolean){\r\n        return instance.post<APIType>(`auth/login`,{email, password, rememberMe})\r\n    },\r\n    logout(){\r\n        return instance.delete<APIType>(`auth/login`)\r\n    }\r\n}\r\n","import {usersAPI} from '../API/api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport type  ActionUserType =\r\n    FollowACActionType\r\n    | UnFollowACActionType\r\n    | SetUsersACActionType\r\n    | SetCurrentPageType\r\n    | SetTotalCountType\r\n    | TogleIsFetchingType\r\n    |\r\n    TogleIsFolliwingProgressType\r\n\r\n\r\ntype FollowACActionType = {\r\n    type: 'FOLLOW'\r\n    userID: number\r\n}\r\n\r\ntype UnFollowACActionType = {\r\n    type: 'UNFOLLOW'\r\n    userID: number\r\n}\r\n\r\ntype SetUsersACActionType = {\r\n    type: 'SET_USERS'\r\n    users: Array<UserType>\r\n}\r\n\r\ntype SetCurrentPageType = {\r\n    type: 'SET_CURRENTPAGE'\r\n    currentPage: number\r\n}\r\n\r\ntype SetTotalCountType = {\r\n    type: 'SET_TOTALCOUNT'\r\n    count: number\r\n}\r\n\r\ntype TogleIsFetchingType = {\r\n    type: 'TOGLE_IS_FETCHING'\r\n    isFetching: boolean\r\n}\r\n\r\ntype TogleIsFolliwingProgressType = {\r\n    type: 'TOGLE_IS_FETCHING_PROGRESS'\r\n    userId: number\r\n    isFetching: boolean\r\n}\r\n\r\nexport  type InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null | string\r\n    photos: PhotoType\r\n    status: null | string\r\n    followed: boolean\r\n}\r\n\r\ntype PhotoType = {\r\n    small: null | string\r\n    large: null | string\r\n}\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 50,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\n\r\nexport const usersReducer = (state: InitialStateType = initialState, action: ActionUserType): InitialStateType => {\r\n    switch (action.type) {\r\n        case'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state, users: action.users\r\n            }\r\n        case 'SET_CURRENTPAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SET_TOTALCOUNT': {\r\n            return {\r\n                ...state, totalUsersCount: action.count\r\n            }\r\n        }\r\n        case 'TOGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'TOGLE_IS_FETCHING_PROGRESS': {\r\n            return {\r\n                ...state, followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const accseptfollow = (userID: number) => ({type: 'FOLLOW', userID: userID});\r\nexport const accseptunfollow = (userID: number) => ({type: 'UNFOLLOW', userID: userID});\r\nexport const setUsers = (users: Array<UserType>) => ({type: 'SET_USERS', users});\r\nexport const setCurrentPage = (currentPage: number) => ({type: 'SET_CURRENTPAGE', currentPage});\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({type: 'SET_TOTALCOUNT', count: totalUsersCount});\r\nexport const togleIsFetching = (isFetching: boolean) => ({type: 'TOGLE_IS_FETCHING', isFetching});\r\nexport const togleIsFollowingProgress = (userId: number, isFetching: boolean) => ({\r\n    type: 'TOGLE_IS_FETCHING_PROGRESS',\r\n    userId,\r\n    isFetching\r\n})\r\n\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(togleIsFetching(true));\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(setUsers(data.items));\r\n            dispatch(setTotalUsersCount(data.totalCount));\r\n            dispatch(togleIsFetching(false));\r\n        });\r\n    }\r\n}\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(togleIsFollowingProgress(userId, true));\r\n        usersAPI.follow(userId).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(accseptfollow(userId));\r\n            }\r\n            dispatch(togleIsFollowingProgress(userId, false));\r\n        })\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(togleIsFollowingProgress(userId, true));\r\n        usersAPI.unfollow(userId).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(accseptunfollow(userId));\r\n            }\r\n            dispatch(togleIsFollowingProgress(userId, false));\r\n        })\r\n    }\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/blank-profile-picture-973460_960_720.efadb13d.webp\";","import React from 'react';\r\nimport userPhoto from '../../../assets/images/blank-profile-picture-973460_960_720.webp';\r\nimport s from './User.module.css';\r\nimport {UserType} from '../../../redux/usersReduser';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n    usersPage: Array<UserType>\r\n    onPageChanged: (p: number) => void\r\n    followingInProgress: number[]\r\n    togleIsFollowingProgress: (userId: number, isFetching: boolean) => void\r\n}\r\n\r\nlet Users = (props: PropsType) => {\r\n    let pageCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i < pageCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    return (<div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span onClick={(e) => {\r\n                    props.onPageChanged(p)\r\n                }} className={props.currentPage === p ? s.selectedNum : ''}>{p}</span>\r\n            })}\r\n        </div>\r\n        {\r\n            props.usersPage.map(u => <div key={u.id}>\r\n                <span>\r\n                    <div><NavLink to={'/profile/' + u.id}>\r\n                        <img src={u.photos.small != null ? u.photos.small : userPhoto} alt=\"UserPhoto\"\r\n                             className={s.userImg}/>\r\n                    </NavLink>\r\n                    </div>\r\n                    <div>{u.followed ?\r\n                        <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                            props.unfollow(u.id)\r\n                        }}>UnFollow</button> :\r\n                        <button onClick={() => {\r\n                            props.follow(u.id)\r\n                        }}>Follow</button>}</div>\r\n                </span>\r\n                    <span>\r\n                    <span>\r\n                        <div>{u.name}</div><div>{u.status}</div>\r\n                    </span>\r\n                </span>\r\n                </div>\r\n            )\r\n        }\r\n    </div>)\r\n}\r\n\r\nexport default Users;","export default __webpack_public_path__ + \"static/media/loader.fc860661.gif\";","import React from 'react';\r\nimport loader from '../../assets/images/loader.gif';\r\n\r\nexport const Preloader = () => {\r\n    return <div><img src={loader} style={{width: 50}}/></div>\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/StoreRedux';\r\nimport {\r\n    follow, getUsersThunkCreator,\r\n    setCurrentPage,\r\n    togleIsFollowingProgress,\r\n    unfollow,\r\n    UserType\r\n} from '../../../redux/usersReduser';\r\nimport Users from './Users';\r\nimport {Preloader} from '../../Common/Preloader';\r\nimport {compose} from 'redux';\r\nimport {WithAuthRedirect} from '../../../HOC/WithAuthRedirect';\r\n\r\nexport type MapStateToPropsType = {\r\n    usersPage: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport type MapDispatchToPropsType = {\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    togleIsFollowingProgress: (userId: number, isFetching: boolean) => void\r\n    getUsersThunkCreator: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nexport type APIType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nclass UsersAIP extends React.Component<MapStateToPropsType & MapDispatchToPropsType, AppStateType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersThunkCreator(this.props.currentPage, this.props.pageSize);\r\n        /*  this.props.togleIsFetching(true);\r\n         usersAPI.getUsers(this.props.currentPage,this.props.pageSize).then(data => {\r\n              this.props.setUsers(data.items);\r\n              this.props.setTotalUsersCount(data.totalCount);\r\n              this.props.togleIsFetching(false);\r\n          });*/\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsersThunkCreator(pageNumber, this.props.pageSize);\r\n        /*this.props.setCurrentPage(pageNumber);\r\n        this.props.togleIsFetching(true);\r\n        usersAPI.getUsers(pageNumber,this.props.pageSize).then(data => {\r\n            this.props.setUsers(data.items);\r\n            this.props.setTotalUsersCount(data.totalCount);\r\n            this.props.togleIsFetching(false);\r\n        });*/\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            <div>{this.props.isFetching ? <Preloader/> : null} </div>\r\n            <div>\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       unfollow={this.props.unfollow}\r\n                       follow={this.props.follow}\r\n                       usersPage={this.props.usersPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                       togleIsFollowingProgress={this.props.togleIsFollowingProgress}\r\n\r\n                /></div>\r\n        </div>)\r\n\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        usersPage: state.UsersPage.users,\r\n        pageSize: state.UsersPage.pageSize,\r\n        totalUsersCount: state.UsersPage.totalUsersCount,\r\n        currentPage: state.UsersPage.currentPage,\r\n        isFetching: state.UsersPage.isFetching,\r\n        followingInProgress: state.UsersPage.followingInProgress\r\n    }\r\n}\r\n/*let mapDispatchToProps=(dispatch:Dispatch):MapDispatchToPropsType=>{\r\nreturn{\r\n    follow:(userID:number)=>{\r\n        dispatch(followAC(userID))\r\n    },\r\n    unfollow:(userID:number)=>{\r\n        dispatch(unfollowAC(userID))\r\n    },\r\n    setUsers:(users:Array<UserType>)=>{\r\n        dispatch(setUsersAC(users))\r\n    },\r\n    setCurrentPage:(currentPage:number)=>{\r\n        dispatch(setCurrentPageAC(currentPage))\r\n},\r\n    setTotalUsersCount:(totalCount:number)=>{\r\n        dispatch(setTotalCountAC(totalCount))\r\n    },\r\n    togleIsFetching:(isFetching:boolean)=>{\r\n        dispatch(TogleIsFetchingAC(isFetching))\r\n    }\r\n}}*/\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    follow, unfollow, setCurrentPage,\r\n    togleIsFollowingProgress, getUsersThunkCreator\r\n}), WithAuthRedirect)(UsersAIP)","import React from 'react';\r\nimport s from './Posts.module.css'\r\n\r\ntype PropsType = {\r\n    post: string\r\n    like: number\r\n}\r\n\r\nexport const Posts = (props: PropsType) => {\r\n    return (<div>\r\n            <div className={s.avaImg}>\r\n                <img\r\n                    src={'https://images.pexels.com/photos/33537/cat-animal-cat-portrait-mackerel.jpg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'}\r\n                    alt=\"Ava\"/>\r\n            </div>\r\n            <div>{props.post} like {props.like}</div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from 'redux';\r\nimport {profileAPI, usersAPI} from '../API/api';\r\n\r\n export type  ActionProfileType = ReturnType<typeof addPost> |\r\n    ReturnType<typeof setUserProfile> | ReturnType<typeof setStatus>\r\n\r\ntype InitialStateType = {\r\n    posts: Array<PostType>\r\n    profile: ProfileType | null\r\n    status: string\r\n    newPostText:string\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: PhotoType\r\n}\r\n\r\nexport type PhotoType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type ContactsType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\n\r\ntype PostType = {\r\n    id: number,\r\n    post: string,\r\n    like: number\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, post: 'Hi!', like: 3},\r\n        {id: 2, post: 'Yo!', like: 4},\r\n        {id: 3, post: 'Like!', like: 1}\r\n    ],\r\n    profile: null,\r\n    status: '',\r\n    newPostText:''\r\n}\r\n\r\nexport const profileReduser = (state: InitialStateType = initialState, action: ActionProfileType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_POST': {\r\n            let postMessage = {\r\n                id: 2,\r\n                post: action.newPostText,\r\n                like: 3\r\n            };\r\n            let stateCopy = {...state, posts: [...state.posts, postMessage], newPostText: ''};\r\n            return stateCopy;\r\n        }\r\n        case 'SET_USERPROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'SET_STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n    /*if(action.type==='ADD_POST'){\r\n        let postMessage={\r\n            id: 5,\r\n            post:state.newPostText,\r\n            like: 3\r\n        }\r\n        state.posts.push(postMessage);\r\n        state.newPostText='';\r\n    }else if(action.type==='UPDATE_POST'){\r\n       state.newPostText=action.newText;}\r\n    return state;*/\r\n}\r\n\r\nexport const addPost = ( newPostText:string) => {\r\n    return {type: 'ADD_POST', newPostText} as const\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {type: 'SET_USERPROFILE', profile} as const\r\n}\r\n\r\nexport const setStatus = (status: string) => {\r\n    return {type: 'SET_STATUS', status} as const\r\n}\r\n\r\nexport const getUserProfile = (userId: string) => (dispatch: Dispatch) => {\r\n    usersAPI.getProfile(userId).then(response => {\r\n        dispatch(setUserProfile(response.data));\r\n    });\r\n}\r\n\r\nexport const getStatus = (userId: string) => (dispatch: Dispatch) => {\r\n    profileAPI.getStatus(userId).then(response => {\r\n        dispatch(setStatus(response.data));\r\n    });\r\n}\r\n\r\nexport const updateStatus = (status: string) => (dispatch: Dispatch) => {\r\n    profileAPI.updateStatus(status).then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './NewPost.module.css'\r\nimport  {Field, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../Common/FormsControls';\r\n\r\ntype NewPostPropsType = {\r\n    addPost: ( newPostText:string) => void\r\n    newPostText: string\r\n}\r\n\r\nexport const NewPost = (props: NewPostPropsType) => {\r\n    let addPost = (values:FormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (<div>\r\n            <AddNewPostForm onSubmit={addPost} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength=maxLengthCreator(20);\r\n\r\nlet AddPostForm=(props:any)=>{\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea} name={'newPostText'} validate={[required, maxLength]} placeholder={'Post message'}/>\r\n        <span><button >Send</button></span>\r\n    </form>\r\n}\r\n\r\ntype FormDataType={\r\n    newPostText:string\r\n}\r\n\r\nlet AddNewPostForm=reduxForm<FormDataType>({form:'ProfileAddNewPostForm'})(AddPostForm);","import React from 'react';\r\nimport {addPost} from '../../../redux/profileReduser';\r\nimport {NewPost} from './NewPost';\r\nimport {AppStateType} from '../../../redux/StoreRedux';\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\n\r\ntype MapStateToPropsType = {\r\n    newPostText: string\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost:( newPostText:string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        newPostText: state.postData.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: ( newPostText:string) => {\r\n            dispatch(addPost( newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nexport const NewPostContainer = connect(mapStateToProps, mapDispatchToProps)(NewPost);","import React from 'react';\r\nimport {StoreType} from './redux/StoreRedux';\r\nconst StoreContext=React.createContext({} as StoreType);\r\nexport default StoreContext;","import React from 'react';\r\nimport {Posts} from './Posts';\r\nimport {NewPostContainer} from './NewPostContainer';\r\nimport StoreContext from '../../../StoreContext';\r\n\r\nexport const MyPost = () => {\r\n    return (<StoreContext.Consumer>\r\n        {\r\n            (store) => {\r\n                let state = store.getState();\r\n                let postElements = state.postData.posts.map(p => <Posts post={p.post} like={p.like}/>)\r\n                return (<div>\r\n                        <h2>My posts</h2>\r\n                        <NewPostContainer/>\r\n                        {postElements}\r\n                    </div>\r\n                )\r\n            }}\r\n    </StoreContext.Consumer>)\r\n}","import React from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<PropsType> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    disActivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    onStatusChange = (e: any) => {\r\n        this.setState({status: e.currentTarget.value})\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            {!this.state.editMode &&\r\n            <div><span onDoubleClick={this.activateEditMode}>{this.props.status || 'No status'}</span></div>}\r\n\r\n            {this.state.editMode &&\r\n            <div><input onChange={this.onStatusChange} autoFocus={true} onBlur={this.disActivateEditMode}\r\n                        value={this.state.status}/></div>}\r\n        </div>)\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {Preloader} from '../../Common/Preloader';\r\nimport {ProfileType} from '../../../redux/profileReduser';\r\nimport {ProfileStatus} from './ProfileStatus';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport let ProfileInfo = (props: PropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return <div>\r\n        <img src={props.profile.photos.large}/>\r\n        <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n    </div>\r\n}","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport {MyPost} from './MyPost';\r\nimport {ProfileInfo} from './ProfileInfo';\r\nimport {ProfileType} from '../../../redux/profileReduser';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile = (props: PropsType) => {\r\n    return (<div className={s.mainProfile}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPost/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {AppStateType} from '../../../redux/StoreRedux';\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from '../../../redux/profileReduser';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {WithAuthRedirect} from '../../../HOC/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\ntype MatchType = {\r\n    userId: string\r\n}\r\n\r\ntype ConnectedPropsType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<MatchType>\r\n\r\ntype  MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    autorizedUserId:number|null\r\n    isAuth:boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nexport type APIType = ProfileType\r\n\r\nclass ProfileContainer extends React.Component<ConnectedPropsType, AppStateType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.autorizedUserId);\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.postData.profile,\r\n    status: state.postData.status,\r\n    autorizedUserId:state.Auth.id,\r\n    isAuth:state.Auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus\r\n}), withRouter, WithAuthRedirect)(ProfileContainer);","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Header.module.css'\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout:()=>void\r\n}\r\n\r\nexport const Header = (props: PropsType) => {\r\n    return (\r\n        <div className={s.header}>\r\n            <img\r\n                src={'https://images.pexels.com/photos/1162361/pexels-photo-1162361.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500'}\r\n                alt=\"logo\"/>\r\n            <div className={s.login}>\r\n                {props.isAuth ?\r\n                    <div>{props.login} - <button onClick={props.logout}>Log out</button></div> :\r\n                    <NavLink to={'/login'}>Login</NavLink>}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../API/api';\r\nimport { AppThunk} from './StoreRedux';\r\nimport { stopSubmit} from 'redux-form';\r\n\r\nexport type ActionAuthType=ReturnType<typeof setAuthUsersData>\r\n\r\ntype InitialStateType={\r\n    id:null|number\r\n    email:null|string\r\n    login:null|string\r\n    isAuth:boolean\r\n}\r\n\r\nlet initialState = {\r\n   id:null,\r\n    email:null,\r\n    login:null,\r\n    isAuth:false,\r\n}\r\ntype  AuthMainActionType = {\r\n    type: \"SET_USERS_DATA\"\r\n    payload: {\r\n        id: null | number\r\n        email: null | string\r\n        login: null | string\r\n        isAuth: boolean\r\n    }\r\n}\r\n\r\nexport const authReducer = (state:InitialStateType = initialState, action: ActionAuthType):InitialStateType  => {\r\n    switch (action.type) {\r\n        case'SET_USERS_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\nexport const setAuthUsersData = (id:number|null, email:string|null, login:string|null, isAuth:boolean):AuthMainActionType => {\r\n    return {type:'SET_USERS_DATA' , payload:{id, email, login,isAuth}} as const\r\n}\r\n\r\nexport const getAuthUsersData=():AppThunk=>(dispatch:Dispatch)=>{\r\n    authAPI.me().then(response => {\r\n        if(response.data.resultCode===0) {\r\n            let {id, email, login} = response.data.data\r\n            dispatch(setAuthUsersData(id, email, login, true));\r\n        }\r\n    });\r\n}\r\n\r\nexport const LoginTC=(email:string,password:string, rememberMe:boolean):AppThunk =>{\r\n   return async (dispatch)=> {\r\n        let response=await authAPI.login(email, password, rememberMe)\r\n            // .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUsersData())\r\n            }else {\r\n                let message=response.data.data.messages.length>0 ? response.data.data.messages[0]:'Some error'\r\n                dispatch(stopSubmit('login',{_error:message}));\r\n            }\r\n    }\r\n}\r\n\r\nexport const logout=()=>(dispatch:Dispatch)=>{\r\n    authAPI.logout().then(response => {\r\n        if(response.data.resultCode===0){\r\n            dispatch(setAuthUsersData(null, null, null,false));\r\n        }\r\n    });\r\n}\r\n","import React from 'react';\r\nimport {AppStateType} from '../../redux/StoreRedux';\r\nimport {Header} from './Header';\r\nimport {connect} from 'react-redux';\r\nimport {getAuthUsersData, logout} from '../../redux/AuthReducer';\r\n\r\nexport type DataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    messages:Array<string>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getAuthUsersData: () => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nclass HeaderApi extends React.Component<MapStateToPropsType & MapDispatchToPropsType, AppStateType> {\r\n    componentDidMount() {\r\n        this.props.getAuthUsersData();\r\n    }\r\n    render() {\r\n        return <Header {...this.props} logout={logout}/>;\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => (\r\n    {\r\n        isAuth: state.Auth.isAuth,\r\n        login: state.Auth.login\r\n    })\r\n\r\nexport default connect(mapStateToProps, {getAuthUsersData, logout})(HeaderApi);","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../../Common/FormsControls';\r\nimport {required} from '../../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../../../redux/StoreRedux';\r\nimport {LoginTC} from '../../../redux/AuthReducer';\r\nimport s from './../../Common/FormsControls.module.css'\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype  MapDispatchPropsType = {\r\n    LoginTC: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype AllType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>>\r\n    = (props) => {\r\n    return <div>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Input} name={'email'} placeholder={'email'} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={'password'} placeholder={'password'} validate={[required]}\r\n                       type={'password'}/>\r\n            </div>\r\n            <div><Field component={Input} name={'rememberMe'} type={'checkbox'} validate={[required]}/>remember me</div>\r\n            {props.error && <div className={s.formSummaryError}>{props.error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm);\r\n\r\nconst Login = (props: AllType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.LoginTC(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.Auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {LoginTC})(Login);","import React from 'react';\nimport './App.css';\nimport {Nav} from './Components/Nav/Nav';\nimport {Route} from 'react-router';\nimport {BrowserRouter} from 'react-router-dom';\nimport {News} from './Components/MainContent/News/News';\nimport {Music} from './Components/MainContent/Music/Music';\nimport {Settings} from './Components/MainContent/Settings/Settings';\nimport {DialogContainer} from './Components/MainContent/Dialogs/DialogContainer';\nimport UserContainer from './Components/MainContent/Users/UserContainer';\nimport ProfileContainer from './Components/MainContent/Profile/ProfileContainer';\nimport HeaderContainer from './Components/Header/HeaderContainer';\nimport Login from './Components/MainContent/login/login';\n\nexport type StateType = {\n    postData: PostDataType\n    messages: MessagesType\n}\n\nexport type PostDataType = {\n    posts: Array<PostType>\n    newPostText: string\n}\n\ntype PostType = {\n    id: number,\n    post: string,\n    like: number\n}\n\nexport type MessagesType = {\n    dialogsData: Array<DialogsType>,\n    messageData: Array<MessageType>\n}\n\ntype DialogsType = {\n    id: number,\n    name: string\n}\n\ntype MessageType = {\n    id: number,\n    message: string\n}\n\nfunction App() {\n\n    return (<BrowserRouter>\n            <div className=\"App\">\n                <HeaderContainer/>\n                <div className=\"InfContainer\">\n                    <Nav/>\n                    <div className=\"appMainContent\">\n                        <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\n                        <Route path=\"/dialogs\" render={() => <DialogContainer/>}/>\n                        <Route path=\"/users\" render={() => <UserContainer/>}/>\n                        <Route path=\"/login\" render={() => <Login />}/>\n                        <Route path=\"/news\" render={() => <News/>}/>\n                        <Route path=\"/music\" render={() => <Music/>}/>\n                        <Route path=\"/settings\" render={() => <Settings/>}/>\n                    </div>\n                </div>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {ActionProfileType,  profileReduser} from './profileReduser';\r\nimport {ActionMessageType, messageReduser} from './messageReduser';\r\nimport {ActionUserType,  usersReducer} from './usersReduser';\r\nimport {ActionAuthType, authReducer} from './AuthReducer';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport {FormAction} from 'redux-form/lib/actions';\r\n\r\n// export type RootReducerType = typeof rootReducers;\r\nexport type AppStateType = ReturnType<typeof rootReducers>\r\nexport type StoreType = typeof store;\r\nexport type ActionType = /*ReturnType<typeof sendMessageAC> |\r\n    ReturnType<typeof addPost> | ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> | ReturnType<typeof setAuthUsersData>*/ActionMessageType|ActionUserType|\r\n    ActionProfileType|ActionAuthType\r\n\r\nlet rootReducers = combineReducers({\r\n    postData: profileReduser,\r\n    messageData: messageReduser,\r\n    UsersPage: usersReducer,\r\n    Auth: authReducer,\r\n    form: formReducer\r\n})\r\n\r\nexport let store = createStore(rootReducers, applyMiddleware(thunkMiddleware));\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, ActionType|FormAction>\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport {store} from './redux/StoreRedux'\nimport StoreContext from './StoreContext';\nimport {Provider} from 'react-redux';\n\nlet renderTree = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <Provider store={store}>\n                <StoreContext.Provider value={store}>\n                    < App/>\n                </StoreContext.Provider>\n            </Provider>\n        </React.StrictMode>,\n        document.getElementById('root'));\n}\nrenderTree();\n\nstore.subscribe(() => {\n    renderTree()\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerDialogs\":\"Dialogs_containerDialogs__29Xah\",\"dialog\":\"Dialogs_dialog__3pvjr\",\"messages\":\"Dialogs_messages__1um_Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1Yzl8\",\"error\":\"FormsControls_error__AzdD7\",\"formSummaryError\":\"FormsControls_formSummaryError__XDdGG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userImg\":\"User_userImg__3w7RG\",\"selectedNum\":\"User_selectedNum__1ujW9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1s8MH\",\"login\":\"Header_login__2avZh\"};"],"sourceRoot":""}